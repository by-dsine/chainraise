datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  profileId     Int?
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userProfile   UserProfile?
  isAdmin       Boolean      @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id        String  @id @default(cuid())
  userId    String? @unique
  ncPartyId String? @unique

  firstName           String?
  middleName          String?
  lastName            String?
  username            String?   @unique
  bio                 String?
  address             String?
  city                String?
  country             String?
  state               String?
  zipCode             String?
  email               String?   @unique
  phone               String?
  accreditationStatus String?   @default("Not Started")
  dob                 DateTime?
  residence           String?
  accountType         String?

  user                        User?                             @relation(fields: [userId], references: [id])
  followedBy                  Follows[]                         @relation("following")
  following                   Follows[]                         @relation("follower")
  userPosts                   UserPost[]
  userPostComments            UserPostComment[]
  userPostReactions           UserPostReaction[]
  userPostCommentReactions    UserPostCommentReaction[]
  createdOrganizations        Organization[]
  memberships                 OrganizationMembership[]
  offeringPosts               OfferingUserPost[]
  offeringPostComments        OfferingUserPostComment[]
  offeringPostReactions       OfferingUserPostReaction[]
  offeringPostCommentReaction OfferingUserPostCommentReaction[]
  platformRoles               PlatformRole[]
  userKYCAML                  UserKYCAML[]
}

model PlatformRole {
  id            String         @id @default(cuid())
  userProfileId String
  userProfile   UserProfile    @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  roleId        Int
  role          RolePermission @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model RolePermission {
  id         Int            @id @default(autoincrement())
  name       String
  isAdmin    Boolean
  canApprove Boolean
  roles      PlatformRole[]
}

model Follows {
  follower    UserProfile @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   UserProfile @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model UserPost {
  id        String             @id @default(cuid())
  authorId  String?
  author    UserProfile?       @relation(fields: [authorId], references: [id], onDelete: SetNull)
  body      String
  comments  UserPostComment[]
  reactions UserPostReaction[]
}

model UserPostComment {
  id            String                    @id @default(cuid())
  authorId      String?
  author        UserProfile?              @relation(fields: [authorId], references: [id], onDelete: SetNull)
  body          String
  postId        String
  userPost      UserPost                  @relation(fields: [postId], references: [id], onDelete: Cascade)
  userReactions UserPostCommentReaction[]
}

model UserPostReaction {
  id         String       @id @default(cuid())
  authorId   String?
  author     UserProfile? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  postId     String
  userPost   UserPost     @relation(fields: [postId], references: [id], onDelete: Cascade)
  reactionId Int
  reaction   UserReaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)
}

model UserPostCommentReaction {
  id              String          @id @default(cuid())
  authorId        String?
  author          UserProfile?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  body            String
  commentId       String
  userPostComment UserPostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reactionId      Int
  reaction        UserReaction    @relation(fields: [reactionId], references: [id], onDelete: Cascade)
}

model UserReaction {
  id                               Int                               @id @default(autoincrement())
  value                            String
  userPostReactions                UserPostReaction[]
  userPostCommentReactions         UserPostCommentReaction[]
  offeringUserPostReaction         OfferingUserPostReaction[]
  offeringUserPostCommentReactions OfferingUserPostCommentReaction[]
}

model Organization {
  id          String                   @id @default(cuid())
  name        String                   @unique
  ncIssuerId  String                   @unique
  ownerId     String
  owner       UserProfile?             @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  memberships OrganizationMembership[]
  offerings   Offering[]
}

model OrganizationRole {
  id          Int                      @id @default(autoincrement())
  name        String
  canApprove  Boolean
  memberships OrganizationMembership[]
}

model OrganizationMembership {
  id             String           @id @default(cuid())
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  userProfileId  String
  userProfile    UserProfile      @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  roleId         Int
  role           OrganizationRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Offering {
  id                 String                  @id @default(cuid())
  name               String
  slug               String?                 @unique
  ncOfferingId       String                  @unique
  organizationId     String
  organization       Organization            @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  startTimestamp     DateTime                @db.Timestamptz(3)
  endTimestamp       DateTime                @db.Timestamptz(3)
  minimumInvestment  Int
  goal               Int
  pledged            Int
  maxRaise           Int?
  description        String
  shortDescription   String
  disclosure         String
  summary            String
  statusId           Int
  status             Status                  @relation(fields: [statusId], references: [id], onDelete: SetNull)
  offeringParameters OfferingParameter[]
  offeringHistory    OfferingStatusHistory[]
  sections           OfferingSection[]
  userPosts          OfferingUserPost[]
  resources          OfferingResource[]
}

model OfferingParameter {
  id           Int      @id @default(autoincrement())
  endTimestamp DateTime @db.Timestamptz(3)
  goal         Int
  offeringId   String
  offering     Offering @relation(fields: [offeringId], references: [id], onDelete: SetNull)
}

model OfferingStatusHistory {
  id         String   @id @default(cuid())
  offeringId String
  offering   Offering @relation(fields: [offeringId], references: [id], onDelete: SetNull)
  statusId   Int
  status     Status   @relation(fields: [statusId], references: [id], onDelete: SetNull)
  timestamp  DateTime @db.Timestamptz(3)
}

model Status {
  id              Int                     @id @default(autoincrement())
  value           String
  statusHistories OfferingStatusHistory[]
  offerings       Offering[]
}

model OfferingSection {
  id         String            @id @default(cuid())
  offeringId String
  offering   Offering          @relation(fields: [offeringId], references: [id], onDelete: SetNull)
  title      String
  subtitle   String
  order      Int
  resources  SectionResource[]
}

model SectionResource {
  id          String          @id @default(cuid())
  sectionId   String
  section     OfferingSection @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  title       String
  subtitle    String
  description String
  location    String
  type        Int
  order       Int
}

model OfferingResource {
  id          String   @id @default(cuid())
  offeringId  String
  offering    Offering @relation(fields: [offeringId], references: [id], onDelete: SetNull)
  title       String
  description String
  location    String
  type        String
  public      Boolean
  order       Int?
}

model OfferingUserPost {
  id            String                     @id @default(cuid())
  offeringId    String
  offering      Offering                   @relation(fields: [offeringId], references: [id], onDelete: SetNull)
  userProfileId String
  userProfile   UserProfile                @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  body          String
  comments      OfferingUserPostComment[]
  reactions     OfferingUserPostReaction[]
}

model OfferingUserPostReaction {
  id             String           @id @default(cuid())
  offeringPostId String
  offeringPost   OfferingUserPost @relation(fields: [offeringPostId], references: [id], onDelete: SetNull)
  userProfileId  String
  userProfile    UserProfile      @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  reactionId     Int
  reaction       UserReaction     @relation(fields: [reactionId], references: [id], onDelete: SetNull)
}

model OfferingUserPostComment {
  id             String                            @id @default(cuid())
  offeringPostId String
  offeringPost   OfferingUserPost                  @relation(fields: [offeringPostId], references: [id], onDelete: SetNull)
  userProfileId  String
  userProfile    UserProfile                       @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  body           String
  reactions      OfferingUserPostCommentReaction[]
}

model OfferingUserPostCommentReaction {
  id                    String                  @id @default(cuid())
  offeringPostCommentId String
  offeringPostComment   OfferingUserPostComment @relation(fields: [offeringPostCommentId], references: [id], onDelete: SetNull)
  userProfileId         String
  userProfile           UserProfile             @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  reactionId            Int
  reaction              UserReaction            @relation(fields: [reactionId], references: [id], onDelete: SetNull)
}

model UserKYCAML {
  id            String      @id @default(cuid())
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  timestamp     DateTime    @default(now()) @db.Timestamptz(3)
  kycStatus     String?     @default("Not Started")
  amlStatus     String?     @default("Not Started")
  response      Json?
}
